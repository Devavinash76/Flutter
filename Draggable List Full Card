class MyWidget extends StatefulWidget {
  @override
  _MyWidgetState createState() => _MyWidgetState();
}

class _MyWidgetState extends State<MyWidget> {
  final List<int> _items = List<int>.generate(50, (int index) => index);

  @override
  Widget build(BuildContext context) {
    final Color oddItemColor = Colors.lime.shade100;
    final Color evenItemColor = Colors.deepPurple.shade100;

    final List<Card> cards = <Card>[
      for (int index = 0; index < _items.length; index += 1)
        Card(
          key: Key('$index'),
          color: _items[index].isOdd ? oddItemColor : evenItemColor,
          child: SizedBox(
            height: 80,
            child: Center(
              child: Text('Card ${_items[index]}'),
            ),
          ),
        ),
    ];

    Widget proxyDecorator(Widget child, int index, Animation<double> animation) {
      return AnimatedBuilder(
        animation: animation,
        builder: (BuildContext context, Widget? child) {
          final double animValue = Curves.easeInOut.transform(animation.value);
          final double elevation = lerpDouble(1, 6, animValue)!;
          final double scale = lerpDouble(1, 1.02, animValue)!;
          return Transform.scale(
            scale: scale,
            // Create a Card based on the color and the content of the dragged one
            // and set its elevation to the animated value.
            child: Card(
              elevation: elevation,
              color: cards[index].color,
              child: cards[index].child,
            ),
          );
        },
        child: child,
      );
    }

    return Scaffold(
      backgroundColor: ThemColors.backgroundColor,
      appBar: AppBar(
        leading:   Padding(
          padding: const EdgeInsets.only(left: 8.0),
          child:  IconButton(
            icon: const Icon(Icons.arrow_back_ios_new),
            onPressed: () {
              // Navigator.push(context, MaterialPageRoute(builder: (_) =>   MainScreen() ));
            },
          ),
        ),
        leadingWidth: 40,
        backgroundColor: Colors.black,
        title: const SizedBox(
          height: 100,
          width: 100,
          child: Image(image: AssetImage('assets/logo.png'),),
        ),
        centerTitle: true, // like this!
        // title: const ImageIcon(AssetImage('assets/profile.png')),
        actions: [
          IconButton(
            icon: const Icon(Icons.notifications),
            onPressed: () {
              // Navigator.push(context, MaterialPageRoute(builder: (_) =>  const NotificationScreen() ));
            },
          ),
        ],
      ),
      body: Column(
        children: <Widget>[
          // Other widgets that can be placed above the ReorderableListView

          Expanded(
            child: ReorderableListView(
              padding: const EdgeInsets.symmetric(horizontal: 40),
              proxyDecorator: proxyDecorator,
              onReorder: (int oldIndex, int newIndex) {
                setState(() {
                  if (oldIndex < newIndex) {
                    newIndex -= 1;
                  }
                  final int item = _items.removeAt(oldIndex);
                  _items.insert(newIndex, item);
                });
              },
              children: cards,
            ),
          ),

          // Other widgets that can be placed below the ReorderableListView
        ],
      ),
    );
  }
}
